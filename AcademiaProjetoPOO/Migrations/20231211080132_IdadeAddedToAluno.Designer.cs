// <auto-generated />
using System;
using EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AcademiaProjetoPOO.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231211080132_IdadeAddedToAluno")]
    partial class IdadeAddedToAluno
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EFCore.Aluno", b =>
                {
                    b.Property<int?>("AlunoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AlunoId");

                    b.ToTable("Alunos");
                });

            modelBuilder.Entity("EFCore.AlunoPlano", b =>
                {
                    b.Property<int?>("AlunoPlanoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AlunoId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PlanoId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("AlunoPlanoId");

                    b.HasIndex("AlunoId");

                    b.HasIndex("PlanoId");

                    b.ToTable("AlunosPlanos");
                });

            modelBuilder.Entity("EFCore.AlunoPresenca", b =>
                {
                    b.Property<int?>("AlunoPresencaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("AlunoId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(3);

                    b.HasKey("AlunoPresencaId");

                    b.HasIndex("AlunoId");

                    b.ToTable("AlunosPresencas");
                });

            modelBuilder.Entity("EFCore.AlunoTreino", b =>
                {
                    b.Property<int?>("AlunoTreinoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TreinoId")
                        .HasColumnType("int");

                    b.HasKey("AlunoTreinoId");

                    b.HasIndex("AlunoId");

                    b.HasIndex("TreinoId");

                    b.ToTable("AlunosTreinos");
                });

            modelBuilder.Entity("EFCore.Exercicio", b =>
                {
                    b.Property<int?>("ExercicioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Repeticoes")
                        .HasColumnType("int");

                    b.Property<int>("Series")
                        .HasColumnType("int");

                    b.HasKey("ExercicioId");

                    b.ToTable("Exercicios");
                });

            modelBuilder.Entity("EFCore.PagamentoAlunoPlano", b =>
                {
                    b.Property<int?>("PagamentoAlunoPlanoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlunoPlanoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("ValorPago")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("PagamentoAlunoPlanoId");

                    b.HasIndex("AlunoPlanoId");

                    b.ToTable("PagamentoAlunosPlanos");
                });

            modelBuilder.Entity("EFCore.Plano", b =>
                {
                    b.Property<int?>("PlanoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Duracao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EhMensal")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("PlanoId");

                    b.ToTable("Planos");
                });

            modelBuilder.Entity("EFCore.Treino", b =>
                {
                    b.Property<int?>("TreinoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CriadoPor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TreinoId");

                    b.ToTable("Treinos");
                });

            modelBuilder.Entity("EFCore.TreinoExercicio", b =>
                {
                    b.Property<int>("TreinoId")
                        .HasColumnType("int");

                    b.Property<int>("ExercicioId")
                        .HasColumnType("int");

                    b.HasKey("TreinoId", "ExercicioId");

                    b.HasIndex("ExercicioId");

                    b.ToTable("TreinosExercicios");
                });

            modelBuilder.Entity("EFCore.Usuario", b =>
                {
                    b.Property<int?>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UsuarioTipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("EFCore.AlunoPlano", b =>
                {
                    b.HasOne("EFCore.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Plano", "Plano")
                        .WithMany()
                        .HasForeignKey("PlanoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Plano");
                });

            modelBuilder.Entity("EFCore.AlunoPresenca", b =>
                {
                    b.HasOne("EFCore.Aluno", "Aluno")
                        .WithMany("AlunoPresencas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");
                });

            modelBuilder.Entity("EFCore.AlunoTreino", b =>
                {
                    b.HasOne("EFCore.Aluno", "Aluno")
                        .WithMany("AlunosTreinos")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Treino", "Treino")
                        .WithMany("AlunosTreinos")
                        .HasForeignKey("TreinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Treino");
                });

            modelBuilder.Entity("EFCore.PagamentoAlunoPlano", b =>
                {
                    b.HasOne("EFCore.AlunoPlano", "AlunoPlano")
                        .WithMany()
                        .HasForeignKey("AlunoPlanoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlunoPlano");
                });

            modelBuilder.Entity("EFCore.TreinoExercicio", b =>
                {
                    b.HasOne("EFCore.Exercicio", "Exercicio")
                        .WithMany("TreinosExercicios")
                        .HasForeignKey("ExercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Treino", "Treino")
                        .WithMany("TreinosExercicios")
                        .HasForeignKey("TreinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercicio");

                    b.Navigation("Treino");
                });

            modelBuilder.Entity("EFCore.Aluno", b =>
                {
                    b.Navigation("AlunoPresencas");

                    b.Navigation("AlunosTreinos");
                });

            modelBuilder.Entity("EFCore.Exercicio", b =>
                {
                    b.Navigation("TreinosExercicios");
                });

            modelBuilder.Entity("EFCore.Treino", b =>
                {
                    b.Navigation("AlunosTreinos");

                    b.Navigation("TreinosExercicios");
                });
#pragma warning restore 612, 618
        }
    }
}
